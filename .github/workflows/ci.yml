# .github/workflows/ci.yml
#
# This workflow sets up Continuous Integration for the ConnectoViz project.
# It runs tests, linters, and type checkers across different Python versions
# on every push to the main branch and for every pull request.

name: CI

# Triggers the workflow on pushes to the 'main' branch
# and on all pull requests.
on:
    push:
        branches:
            - main # Or 'master', depending on your default branch name
    pull_request:
        branches:
            - main # Or 'master'

# Define jobs that will be executed as part of this workflow.
jobs:
    # 'build' job to run tests and checks.
    build:
        name: ${{ matrix.name }}
        runs-on: ${{ matrix.os }}
        timeout-minutes: 30
        strategy:
            fail-fast: false
            matrix:
                include:
                    - name: 'check'
                      python: '3.12'
                      toxpython: 'python3.12'
                      tox_env: 'check'
                      os: 'ubuntu-latest'
                    - name: 'docs'
                      python: '3.12'
                      toxpython: 'python3.12'
                      tox_env: 'docs'
                      os: 'ubuntu-latest'
                    - name: 'py310 (ubuntu)'
                      python: '3.11'
                      toxpython: 'python3.11'
                      python_arch: 'x64'
                      tox_env: 'py310'
                      os: 'ubuntu-latest'

        # Environment variables for the entire job.
        # We add 'src' to the PYTHONPATH so that Python can find the 'connectoviz' package
        # when it's located under the 'src/' directory.
        env:
            PYTHONPATH: '${{ github.workspace }}/src'

        # Steps define the sequence of commands to be executed in the job.
        steps:
            # 1. Checkout the repository code.
            - name: Checkout repository
              uses: actions/checkout@v4 # Use actions/checkout@v4 for reliable checkout.

            # 2. Set up the specified Python version.
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5 # Use actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}
                  # Cache pip dependencies to speed up subsequent runs.
                  cache: 'pip'

            # 3. Install build dependencies and pre-commit to run checks
            #    The -e . installs the package from the root, but requires your
            #    pyproject.toml or setup.py to correctly specify `package_dir={'': 'src'}`
            #    or similar for packages located in 'src/'.
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  # Install development requirements first (pytest, black, mypy, pre-commit)
                  pip install -r requirements_dev.txt
                  # Install the package itself in editable mode for testing
                  pip install -e .

            # 4. Run pre-commit hooks (as a sanity check on CI, even if they run locally)
            # This ensures no local bypasses of pre-commit hooks make it into the main branch.
            - name: Run pre-commit hooks
              run: pre-commit run --all-files

            # 5. Run tests with pytest, including coverage.
            # The PYTHONPATH set at the job level ensures 'connectoviz' is importable.
            - name: Run tests with pytest
              run: |
                  pytest --cov=connectoviz --cov-report=xml

            # 6. Upload coverage reports to Codecov.
            # This step only runs if the Python version is the latest (e.g., 3.12) to avoid duplicate uploads.
            - name: Upload coverage to Codecov
              if: ${{ matrix.python-version == '3.12' }} # Only upload once for a specific Python version
              uses: codecov/codecov-action@v4
              with:
                  # Ensure you set CODECOV_TOKEN in your GitHub repository secrets if using private repos.
                  # For public repos, a token might not be strictly required by Codecov.
                  # token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage.xml # Path to the coverage report generated by pytest.
                  verbose: true # Show detailed log for coverage upload.
